# gitignore.io cli for fish
#
set -g tmp_gilist_fname /tmp/.gi_list_updated # it can be always the same

function gi
	set -l res ''
	if test (count $argv) = 1 -a $argv[1] = 'list'
		set res (curl http://gitignore.io/api/list | tr ',' '\n' | sort ^/dev/null)
		if test (count $res) > 1
			emit gi_list_updated $res
		end
		echo $res
		return
	else
		set args 
		if contains 'list' $argv
			echo (set_color -o red)"Sorry, but `list` parameter doesn't make sense with others"(set_color normal) ^-
			for a in $argv
				if test $a = 'list'; continue; end
				set args $args $a
			end
			echo (set_color -o red)"the command will run as "(set_color -o green)" `gi $args`:"(set_color normal) ^-
		else
			set args $argv
		end
		set -l params (echo $args|tr ' ' ',')
		curl http://gitignore.io/api/$params
	end
end

function _upd_mem --on-event gi_list_updated
	set -U _gi_list $argv
end

function _upd_tmp_gilis --on-event gi_list_updated
	echo $argv | tr ' ' '\n' > $tmp_gilist_fname		
end

# used to make the shell initialization more responsive.
# see "The law of responsiveness" in `help design`
# the latency ranking is: network, fs, memory
# so the gi_list is searched first in memory, than fs and network
function __get_gilist	
	if not set -q -U _gi_list # search in memory			
		if test -e $tmp_gilist_fname # then fs
			set -U _gi_list (cat $tmp_gilist_fname)
			echo $_gi_list | tr ' ' '\n'
		else # trigger the memory and fs loading
			echo (gi list) | tr ' ' '\n'
		end			
	else 
		echo $_gi_list | tr ' ' '\n'		
	end		
end

complete -c gi -a '(__get_gilist)' -x --description 'from gitignore.io' 